Turbo Assembler	 Version 4.1	    02/16/25 17:12:07	    Page 1
frame.asm



      1				     ;------------------------------------------------------------------------------
      2				     ;			     Asm Task to Valentine's day
      3				     ;			       (c) 2025	Muratov	Artyom
      4				     ;------------------------------------------------------------------------------
      5	0000			     .model tiny
      6	0000			     .code
      7				     org 100h
      8	0100  E8 006C		     Start:	     call ReadCmdLine		     ; read info about frame
      9										     ; from command line
     10	0103  E8 0035				     call FindPosFrame		     ; di = start of print frame
     11
     12	0106  E8 010A				     call MakeFrame		     ; make frame
     13
     14	0109  E8 0022				     call StrLen		     ; find size of text
     15										     ; cx = size of text
     16	010C  E8 0012				     call FindPosText		     ; find position of	text
     17										     ; di = start of print text
     18	010F  E8 0005				     call MakeText		     ; write text to frame
     19
     20	0112  B8 4C00				     mov  ax, 4c00h		     ; DOS Fn 4ch = exit (al)
     21	0115  CD 21				     int  21h
     22
     23				     ;------------------------------------------------------------------------------
     24				     ; MakeText	     Func to write text	to frame
     25				     ; Entry:	     bx	= ptr to strat of text in command line
     26				     ;		     di	= start	of print text
     27				     ;		     es	= videoseg
     28				     ;		     ah	= color	of text
     29				     ; Exit:	     None
     30				     ; Destroy:	     bx, si, di
     31				     ;------------------------------------------------------------------------------
     32	0117			     MakeText	     proc
     33	0117  8B F3				     mov  si, bx		     ; si = bx
     34	0119  AC				     lodsb			     ; mov al, ds:[si]
     35										     ; inc si
     36	011A  AB		     NewChar:	     stosw			     ; mov es:[di], ax && di +=	2
     37	011B  AC				     lodsb			     ; mov al, ds:[si]
     38										     ; inc si
     39	011C  3C 24				     cmp  al, 24h		     ; if (al != '$') {
     40	011E  75 FA				     jne  NewChar		     ; goto NewChar}
     41
     42	0120  C3				     ret
     43	0121			     MakeText	     endp
     44
     45				     ;------------------------------------------------------------------------------
     46				     ; FindPosText   Func to find position of text in video memory
     47				     ; Entry:	     cx	= len of text
     48				     ; Exit:	     di	= start	of print text
     49				     ; Destroy:	     di
     50				     ;------------------------------------------------------------------------------
     51	0121			     FindPosText     proc
     52	0121  BF 0050				     mov  di, 80		     ; di = 80
     53	0124  2B F9				     sub  di, cx		     ; di = 80 - cx
     54	0126  81 C7 0780			     add  di, 12 * 80 *	2	     ; di to some middle string
     55										     ; di = start of text
     56	012A  83 E7 FE				     and  di, 0FFFEh		     ; make di even
     57	012D  C3				     ret
Turbo Assembler	 Version 4.1	    02/16/25 17:12:07	    Page 2
frame.asm



     58	012E			     FindPosText     endp
     59
     60				     ;------------------------------------------------------------------------------
     61				     ; StrLen	     Func to find len of string	that end '$'
     62				     ; Entry:	     bx	= start	of text
     63				     ; Exit:	     cx	= len of text
     64				     ; Destroy:	     cx, si
     65				     ;------------------------------------------------------------------------------
     66	012E			     StrLen	     proc
     67	012E  50				     push ax			     ; save old	value of ax in stack
     68	012F  8B F3				     mov  si, bx		     ; si = bx
     69	0131  33 C9				     xor  cx, cx		     ; cx = 0
     70
     71	0133  41		     NewSymbol:	     inc  cx			     ; cx++
     72	0134  AC				     lodsb			     ; mov al, ds:[si]
     73										     ; inc si
     74	0135  3C 24				     cmp  al, 24h		     ; if (al != '$') {
     75	0137  75 FA				     jne  NewSymbol		     ; goto NewSymbol}
     76	0139  58				     pop  ax			     ; back ax from stack
     77	013A  C3				     ret
     78	013B			     StrLen	     endp
     79
     80				     ;------------------------------------------------------------------------------
     81				     ; FindPosFrame  Func to find position of frame in video memory
     82				     ; Entry:	     cx	= len	of frame
     83				     ;		     dx	= high	of frame
     84				     ; Exit:	     di	= start	of print frame
     85				     ; Destroy:	     di
     86				     ;------------------------------------------------------------------------------
     87	013B			     FindPosFrame    proc
     88	013B  33 FF				     xor  di, di		     ; di = 0
     89	013D  50				     push ax			     ; save ax in stack
     90
     91	013E  B8 0050				     mov  ax, 80		     ; ax = 80 (ax = len of screen)
     92	0141  2B C1				     sub  ax, cx		     ; ax = 80 - cx
     93	0143  03 F8				     add  di, ax		     ; di = start in string
     94
     95	0145  B8 0019				     mov  ax, 25		     ; ax  = 25	(ax = high of screen)
     96	0148  2B C2				     sub  ax, dx		     ; ax  = 25	- dx
     97	014A  D1 E8				     shr  ax, 1			     ; ax /= 2 | ax = number of
     98										     ; first string in screen)
     99	014C  52				     push dx			     ; save dx in stack
    100	014D  8B D0				     mov  dx, ax		     ; dx  = ax
    101	014F  D1 E2 D1 E2 D1 E2	D1+		     shl  dx, 4			     ; dx *= 16
    102	      E2
    103	0157  D1 E0 D1 E0 D1 E0	D1+		     shl  ax, 6			     ; ax *= 64
    104	      E0 D1 E0 D1 E0
    105	0163  03 C2				     add  ax, dx		     ; (result:	ax  = 80 * ax)
    106	0165  D1 E0				     shl  ax, 1			     ; ax *= 2
    107										     ; (ax = ptr of first string
    108										     ; in screen)
    109	0167  5A				     pop  dx			     ; back dx from stack
    110	0168  03 F8				     add  di, ax		     ; di = ptr	of upper left cornel
    111										     ; of frame
    112	016A  83 E7 FE				     and  di, 0FFFEh		     ; make di even
    113	016D  58				     pop  ax			     ; back ax from stack
    114	016E  C3				     ret
Turbo Assembler	 Version 4.1	    02/16/25 17:12:07	    Page 3
frame.asm



    115	016F			     FindPosFrame    endp
    116
    117				     ;------------------------------------------------------------------------------
    118				     ; ReadCmdLine   Func to read info about frame parametres
    119				     ; Entry:	     None
    120				     ; Exit:	     si	= ptr	of array of symbols
    121				     ;		     ah	= color	of frame
    122				     ;		     cx	= len	of frame
    123				     ;		     dx	= high	of frame
    124				     ;		     bx	= love letter
    125				     ; Destroy:	     si, ah, cx, dx, bx
    126				     ;------------------------------------------------------------------------------
    127	016F			     ReadCmdLine     proc
    128	016F  BB 0081				     mov  bx, 81h		     ; bx = start of command line
    129	0172  E8 0091				     call SkipSpaces		     ; skip all	spaces before arg
    130										     ; with len	of frame
    131	0175  E8 006B				     call Atoi			     ; read info about len of frame
    132										     ; and convert it to number
    133										     ; in register cx
    134	0178  E8 008B				     call SkipSpaces		     ; skip all	spaces before arg
    135										     ; with high of frame
    136	017B  51				     push cx			     ; save len	 of frame
    137										     ; (cx) in stack
    138	017C  E8 0064				     call Atoi			     ; read info about high of frame
    139										     ; and convert it to number
    140										     ; in register cx
    141	017F  8B D1				     mov  dx, cx		     ; dx      = high of frame
    142	0181  59				     pop  cx			     ; back cx = len  of frame
    143	0182  E8 0081				     call SkipSpaces		     ; skip all	spaces before arg
    144										     ; with color of frame
    145	0185  E8 0032				     call Atoih			     ; read info about color
    146										     ; of frame	from cmd line and
    147										     ; record it to byte ah
    148	0188  E8 007B				     call SkipSpaces		     ; skip all	spaces before arg
    149										     ; with mode of frame
    150	018B  E8 0004				     call ModeFrame		     ; read mode from [bx] &&
    151										     ; si = ptr	to array of symbols
    152										     ; to make frame
    153	018E  E8 0075				     call SkipSpaces		     ; skip all	spaces before array
    154										     ; with text about love
    155										     ; bx = start of text
    156	0191  C3				     ret
    157	0192			     ReadCmdLine     endp
    158
    159				     ;------------------------------------------------------------------------------
    160				     ; ModeFrame     Func to find mode of frame	in cmd line
    161				     ; Entry:	     bx	= ptr mode in command line
    162				     ; Exit:	     si	= start	of array with symbols for frame
    163				     ;		     bx	= end of mode
    164				     ; Destroy:	     bx, si, ax
    165				     ;------------------------------------------------------------------------------
    166	0192			     ModeFrame	     proc
    167	0192  8B F3				     mov  si, bx		     ; si = ptr	to number of mode
    168	0194  50				     push ax			     ; save ax in stack
    169
    170	0195  33 C0				     xor  ax, ax		     ; ax = 0
    171	0197  AC				     lodsb			     ; mov al, ds:[si] && inc si
Turbo Assembler	 Version 4.1	    02/16/25 17:12:07	    Page 4
frame.asm



    172	0198  2C 30				     sub  al, 30h		     ; al -= 30h, to get a number
    173										     ; from hex	of char
    174	019A  3C 00				     cmp  al, 0			     ; if (al == 0) {
    175	019C  74 1B				     je	  Custom		     ; goto Custom }
    176										     ;Style + 9	* (frame_style - 1)
    177	019E  BE 0253r				     lea  si, Style		     ; si = start of 2D	array Style
    178
    179	01A1  53				     push bx			     ; save bx in stack
    180	01A2  8B D8				     mov  bx, ax		     ; bx = ax
    181	01A4  D1 E0 D1 E0 D1 E0			     shl  ax, 3			     ; ax *= 2^3 (ax *=	8)
    182	01AA  03 C3				     add  ax, bx		     ; ax += bx
    183	01AC  2D 0009				     sub  ax, 9			     ; (result ax = 9 *	(ax - 1))
    184
    185	01AF  03 F0				     add  si, ax		     ; si += ax
    186
    187	01B1  5B				     pop  bx			     ; back bx from stack
    188	01B2  58				     pop  ax			     ; back ax from stack
    189	01B3  83 C3 01				     add  bx, 1			     ; bx = next symbol
    190										     ; after number of mode
    191	01B6  EB 01 90				     jmp  EndFindMode		     ; goto EndFindMode
    192	01B9			     Custom:
    193
    194
    195	01B9  C3		     EndFindMode:    ret
    196	01BA			     Modeframe	     endp
    197
    198				     ;------------------------------------------------------------------------------
    199				     ; Atoih	     Func to read command line and make	number hex from	string
    200				     ;		     to	register ah
    201				     ; Entry:	     bx	= start	a number in command line
    202				     ; Exit:	     ah	= hex number from cmd line
    203				     ;		     bx	= ptr to next symbol after number in command line
    204				     ; Destroy:	     bx, ax, si
    205				     ;------------------------------------------------------------------------------
    206	01BA			     Atoih	     proc
    207	01BA  51				     push cx			     ; save cx in stack
    208	01BB  B9 0000				     mov  cx, 0			     ; cx = 0
    209	01BE  8B F3				     mov  si, bx		     ; si = start of number
    210										     ; in cmd line
    211	01C0  33 C0		     NewHexDigit:    xor  ax, ax		     ; mov ax, 0
    212	01C2  AC				     lodsb			     ; mov al, ds:[si] && inc si
    213
    214	01C3  2D 0060				     sub  ax, 60h		     ; if (ax >	60h){
    215	01C6  77 03				     ja	  HexDigit		     ; goto HexDigit } <---(ax > 9)
    216	01C8  05 0030				     add  ax, 30h		     ; else { ax += 30h}
    217	01CB			     HexDigit:					     ; ax = last digit of number
    218	01CB  D1 E1 D1 E1 D1 E1	D1+		     shl  cx, 4			     ; cx *= 2^4 (cx *=	16)
    219	      E1
    220	01D3  03 C8				     add  cx, ax		     ; cx += ax
    221	01D5  80 3C 68				     cmp  byte ptr ds:[si], 68h	     ; if (si == 'h'){
    222	01D8  75 E6				     jne  NewHexDigit		     ; goto NewHexDigit: of number }
    223
    224	01DA  46				     inc  si			     ; si++, to	skip 'h'
    225	01DB  33 C0				     xor  ax, ax		     ; clean ax	(ax = 0)
    226	01DD  8A E1				     mov  ah, cl		     ; ah = color of frame from	cl
    227	01DF  8B DE				     mov  bx, si		     ; bx = ptr	of next	symbol
    228										     ; after number in cmd line
Turbo Assembler	 Version 4.1	    02/16/25 17:12:07	    Page 5
frame.asm



    229	01E1  59				     pop  cx			     ; cx = old	value cx from stack
    230
    231	01E2  C3				     ret
    232	01E3			     Atoih	     endp
    233
    234				     ;------------------------------------------------------------------------------
    235				     ; Atoi	     Func to read command line and make	number from string
    236				     ;		     to	register cx
    237				     ; Entry:	     bx	= start	a number in command line
    238				     ; Exit:	     cx	= number from cmd line
    239				     ;		     bx	= ptr to next symbol after number in command line
    240				     ; Destroy:	     bx, cx, si
    241				     ;------------------------------------------------------------------------------
    242	01E3			     Atoi	     proc
    243	01E3  B9 0000				     mov  cx, 0			     ; cx = 0
    244	01E6  8B F3				     mov  si, bx		     ; si = start of number
    245										     ; in cmd line
    246	01E8  33 C0		     NewDigit:	     xor  ax, ax		     ; mov ax, 0
    247	01EA  AC				     lodsb			     ; mov al, ds:[si] && inc si
    248	01EB  2D 0030				     sub  ax, 30h		     ; ax = last digit of number
    249	01EE  50				     push ax			     ; save ax
    250	01EF  8B C1				     mov  ax, cx		     ; ax = cx
    251	01F1  D1 E1 D1 E1 D1 E1			     shl  cx, 3			     ; cx *= 2^3 (cx *=	8)
    252	01F7  03 C8				     add  cx, ax		     ;
    253	01F9  03 C8				     add  cx, ax		     ; (result:	cx *= 10)
    254	01FB  58				     pop ax			     ; back ax from stack
    255										     ; ax = last digit of number
    256	01FC  03 C8				     add  cx, ax		     ; cx += ax
    257	01FE  80 3C 20				     cmp  byte ptr ds:[si], 20h	     ; if (si != ' ')
    258	0201  75 E5				     jne  NewDigit		     ; goto NewDigit: of number
    259
    260	0203  8B DE				     mov  bx, si		     ; bx = ptr	of next	symbol
    261										     ; after number in cmd line
    262	0205  C3				     ret
    263	0206			     Atoi	     endp
    264
    265				     ;------------------------------------------------------------------------------
    266				     ; SkipSpaces    Func to skip all space symbols before info	about frame
    267				     ; Entry:	     None
    268				     ; Exit:	     bx	= ptr to start info about frame
    269				     ; Destroy:	     bx
    270				     ;------------------------------------------------------------------------------
    271	0206			     SkipSpaces	     proc
    272	0206  53		     StartSkip:	     push bx			     ; save value bx in	stack
    273										     ; bx = ptr	to command line
    274	0207  8A 1F				     mov  byte ptr bl, [bx]	     ; bl = [bx]
    275	0209  80 FB 20				     cmp  bl, 20h		     ; if ([bx]	!= ' '){
    276	020C  5B				     pop  bx			     ; back bx
    277	020D  75 03				     jne  EndSkip		     ; goto EndSkip:}
    278	020F  43				     inc  bx			     ; else { bx++;
    279	0210  EB F4				     jmp  StartSkip		     ; goto StartSkip:}
    280
    281	0212  C3		     EndSkip:	     ret
    282	0213			     SkipSpaces	     endp
    283
    284				     ;------------------------------------------------------------------------------
    285				     ; MakeFrame     Func to make frame
Turbo Assembler	 Version 4.1	    02/16/25 17:12:07	    Page 6
frame.asm



    286				     ; Entry:	     ah	    - color of frame
    287				     ;		     si	    - ptr   of array of	the symbols for	frame
    288				     ;		     cx	    - len   of frame
    289				     ;		     dx	    - high  of frame
    290				     ;		     di	    - start of print (upper left cornel)
    291				     ; Exit:	     None
    292				     ; Destroy:	     ax, si, cx, dx, di, es
    293				     ;------------------------------------------------------------------------------
    294	0213			     MakeFrame	     proc
    295	0213  57				     push di			     ; save start of print in stack
    296	0214  E8 0036				     call SetEsVideoSeg		     ; di = 0b800h; es = di
    297	0217  5F				     pop  di			     ; back start of print
    298
    299	0218  51				     push cx			     ; save cx in stack
    300	0219  E8 0020				     call MakeStrFrame		     ; make first string of frame
    301	021C  59				     pop  cx			     ; pop cx from stack
    302	021D  83 EA 02				     sub  dx, 2			     ; dx -= 2;	dx = number
    303										     ; of middle strings
    304	0220  81 C7 00A0	     MakeMiddle:     add  di, 80 * 2		     ; di to next string
    305	0224  51				     push cx			     ; save cx
    306	0225  56				     push si			     ; save si
    307	0226  E8 0013				     call MakeStrFrame		     ; make middle string
    308	0229  5E				     pop si			     ; si = &(start symbol of
    309										     ; middle strings)
    310	022A  59				     pop  cx			     ; cx = len	of frame
    311	022B  4A				     dec  dx			     ; dx--;
    312	022C  83 FA 00				     cmp  dx, 0			     ; dx = 0?
    313	022F  75 EF				     jne  MakeMiddle		     ; loop
    314
    315	0231  83 C6 03				     add  si, 3			     ; si = &(start symbol of
    316										     ; end string)
    317	0234  81 C7 00A0			     add  di, 80 * 2		     ; di to next string
    318
    319	0238  E8 0001				     call MakeStrFrame		     ; make end	string of frame
    320
    321	023B  C3				     ret
    322	023C			     MakeFrame	     endp
    323
    324				     ;------------------------------------------------------------------------------
    325				     ; MakeStrFrame  Func to make string of frame
    326				     ; Entry:	     ah	    - color of string
    327				     ;		     si	    - array of symbol for string
    328				     ;		     cx	    - len of string
    329				     ;		     di	    - start of print string
    330				     ;		     es	    - videoseg
    331				     ; Exit:	     None
    332				     ; Destroy:	     ax, cx, si
    333				     ;------------------------------------------------------------------------------
    334	023C			     MakeStrFrame    proc
    335	023C  57				     push di			     ; save di = start of string
    336
    337	023D  AC				     lodsb			     ; ax = first symbol of string
    338										     ; mov al, ds:[si] && inc si
    339	023E  AB				     stosw			     ; mov es:[di], ax && di +=	2
    340
    341	023F  AC				     lodsb			     ; ax = middle symbol of string
    342										     ; mov al, ds:[si] && inc si
Turbo Assembler	 Version 4.1	    02/16/25 17:12:07	    Page 7
frame.asm



    343	0240  83 E9 02				     sub  cx, 2			     ; cx -= 2;	cx = number
    344										     ; of middle symbols
    345	0243  E8 0004				     call PutString		     ; put all middle symbols
    346	0246  AC				     lodsb			     ; ax = end	symbol of string
    347										     ; mov al, ds:[si] && inc si
    348	0247  AB				     stosw			     ; mov es:[di], ax && di +=	2
    349	0248  5F				     pop  di			     ; back di = start of string
    350
    351	0249  C3				     ret
    352	024A			     MakeStrFrame    endp
    353
    354				     ;------------------------------------------------------------------------------
    355				     ; PutString     Func to put string	to consol
    356				     ; Entry:	     ah/ al - color/ symbol
    357				     ;		     cx	    - size of text
    358				     ;		     di	    - start of print
    359				     ;		     es	    - videoseg
    360				     ; Exit:	     None
    361				     ; Destroy:	     es, cx, di
    362				     ;------------------------------------------------------------------------------
    363	024A			     PutString	     proc
    364	024A  F3> AB				     rep stosw			     ; mov es:[di], ax && di +=	2
    365										     ; cx -= 1;	cx = 0?; make loop
    366	024C  C3				     ret
    367	024D			     PutString	     endp
    368
    369				     ;------------------------------------------------------------------------------
    370				     ; SetEsVideoSeg Func to set ptr of	videoseg to es
    371				     ; Entry:	     None
    372				     ; Exit:	     None
    373				     ; Destroy:	     es, di
    374				     ;------------------------------------------------------------------------------
    375	024D			     SetEsVideoSeg   proc
    376	024D  BF B800				     mov  di, 0b800h		     ; VIDEOSEG
    377	0250  8E C7				     mov  es, di		     ; es = videoseg
    378	0252  C3				     ret
    379	0253			     SetEsVideoSeg   endp
    380
    381				     ;------------------------------------------------------------------------------
    382				     ;		   Arrays of frame's symbols --> //TODO: one 2D	array
    383				     ;№      1.1   1.2   1.3	 2.1   2.2   2.3   3.1	 3.2   3.3
    384				     ;1--------------------------------------------------------------
    385	0253  C9 CD BB BA 00 BA	C8+  Style db 0c9h, 0cdh, 0bbh,	0bah,  00h, 0bah, 0c8h,	0cdh, 0bch
    386	      CD BC
    387	025C  03 03 03 03 00 03	03+	   db 03h,  03h,  03h,	03h,  00h,  03h,  03h,	03h,  03h
    388	      03 03
    389	0265  DA C4 BF B3 00 B3	C0+	   db 0dah, 0c4h, 0bfh,	0b3h,  00h, 0b3h, 0c0h,	0c4h, 0d9h
    390	      C4 D9
    391	026E  31 32 33 34 35 36	37+	   db "123456789"
    392	      38 39
    393	0277  DC DC DC DD 00 DE	DF+	   db 0dch, 0dch, 0dch,	0ddh,  00h, 0deh, 0dfh,	0dfh, 0dfh
    394	      DF DF
    395	0280  24 24 24 24 00 24	24+	   db 024h, 024h, 024h,	024h,  00h, 024h, 024h,	024h, 024h
    396	      24 24
    397	0289  E0 E1 E7 E1 E0 E7	E7+	   db 0e0h, 0e1h, 0e7h,	0e1h, 0e0h, 0e7h, 0e7h,	0e1h, 0e0h
    398	      E1 E0
    399	0292  F4 2B F4 B3 00 B3	F5+	   db 0f4h, 02bh, 0f4h,	0b3h,  00h, 0b3h, 0f5h,	02bh, 0f5h
Turbo Assembler	 Version 4.1	    02/16/25 17:12:07	    Page 8
frame.asm



    400	      2B F5
    401
    402				     ; 1.1 - start  symbol of first  string
    403				     ; 1.2 - middle symbol of first  string
    404				     ; 1.3 - end    symbol of first  string
    405				     ; 2.1 - start  symbol of middle strings
    406				     ; 2.2 - middle symbol of middle strings
    407				     ; 2.3 - end    symbol of middle strings
    408				     ; 3.1 - start  symbol of end    string
    409				     ; 3.2 - middle symbol of end    string
    410				     ; 3.3 - end    symbol of end    string
    411				     ;------------------------------------------------------------------------------
    412
    413				     end	     Start
Turbo Assembler	 Version 4.1	    02/16/25 17:12:07	    Page 9
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/16/25"
??FILENAME			  Text	 "frame	  "
??TIME				  Text	 "17:12:07"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRAME
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ATOI				  Near	 DGROUP:01E3
ATOIH				  Near	 DGROUP:01BA
CUSTOM				  Near	 DGROUP:01B9
ENDFINDMODE			  Near	 DGROUP:01B9
ENDSKIP				  Near	 DGROUP:0212
FINDPOSFRAME			  Near	 DGROUP:013B
FINDPOSTEXT			  Near	 DGROUP:0121
HEXDIGIT			  Near	 DGROUP:01CB
MAKEFRAME			  Near	 DGROUP:0213
MAKEMIDDLE			  Near	 DGROUP:0220
MAKESTRFRAME			  Near	 DGROUP:023C
MAKETEXT			  Near	 DGROUP:0117
MODEFRAME			  Near	 DGROUP:0192
NEWCHAR				  Near	 DGROUP:011A
NEWDIGIT			  Near	 DGROUP:01E8
NEWHEXDIGIT			  Near	 DGROUP:01C0
NEWSYMBOL			  Near	 DGROUP:0133
PUTSTRING			  Near	 DGROUP:024A
READCMDLINE			  Near	 DGROUP:016F
SETESVIDEOSEG			  Near	 DGROUP:024D
SKIPSPACES			  Near	 DGROUP:0206
START				  Near	 DGROUP:0100
STARTSKIP			  Near	 DGROUP:0206
STRLEN				  Near	 DGROUP:012E
STYLE				  Byte	 DGROUP:0253

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  029B Word	  Public  CODE
